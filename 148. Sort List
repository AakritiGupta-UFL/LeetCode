/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode sortList(ListNode head) {
        if(head==null) return null;
        PriorityQueue<Integer> q=new PriorityQueue<>();
        ListNode temp=head;
        while(temp!=null)
        {
            q.add(temp.val);
            temp=temp.next;
        }
        ListNode ans=new ListNode(0);
        ListNode dummy=ans;
        
        while(!q.isEmpty())
        {
            dummy.next=new ListNode(q.poll());
            dummy=dummy.next;
        }
        return ans.next;
    }
}


//APPROACH 2

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode sortList(ListNode head) {
       if(head == null || head.next == null) return head;
        // break current list into two halves
        ListNode prev = null, slow = head, fast = head;
        while(fast != null && fast.next != null) {
            prev = slow; slow = slow.next; fast = fast.next.next;
        }
        prev.next = null;                                   // break the list
        ListNode l1 = sortList(head), l2 = sortList(slow);  // recursive call will break each list
        return mergeTwoLists(l1, l2);                       // merge the broken halves;
    }
    
    // A simple routine to merge two lists - Same as Question 21 on Leetcode
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        ListNode dummy = new ListNode(0);
        ListNode head = dummy;
        while(l1!=null && l2!=null) {
            if(l1.val < l2.val) {
                dummy.next = l1;
                l1 = l1.next;
            } else {
                dummy.next = l2;
                l2 = l2.next;
            }
            dummy = dummy.next;
        }
        if(l2!=null) dummy.next = l2;
        else if(l1!=null) dummy.next = l1;
        
        return head.next;
    }
}
