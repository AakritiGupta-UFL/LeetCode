class Solution {
    // Based on https://leetcode.com/problems/binary-watch/discuss/88451/0ms-C++-Back-tracking-Solution-with-explanation
    public List<String> readBinaryWatch(int num) {
        List<String> s = new ArrayList<>();
        if (num == 0){
            s.add("0:00");            
            return s;
        }
        times(s, num, 0, 0, 0);
        return s;
    }
    
    int [] hourVals = {1, 2, 4, 8};
    int [] minuteVals = {1, 2, 4, 8, 16, 32};
    
    void times(List <String> res, int num, int hour, int min, int startPoint){
            if (num == 0){
                res.add((hour +  (min < 10 ?  ":0" : ":") + min));
            } 
            
            for (int i = startPoint; i < hourVals.length + minuteVals.length; i++){
                    if (i < hourVals.length){
                        if (hour + hourVals[i] < 12) times(res, num -1, hour + hourVals[i], min, i + 1);    
                    } else {
                        if (min + minuteVals[i - hourVals.length] < 60) times(res, num -1, hour, min + minuteVals[i- hourVals.length], i + 1);
                    }
                    
            }
    }
}
