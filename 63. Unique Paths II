class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
      
        if (obstacleGrid[0][0] == 1) {
            return 0;
        }


    for(int i=0;i<obstacleGrid.length;i++)
    {
        for(int j=0;j<obstacleGrid[0].length;j++)
        {
            if(obstacleGrid[i][j]==1) obstacleGrid[i][j]=-1;
        }
    }
    
        
        // Number of ways of reaching the starting cell = 1.
        obstacleGrid[0][0] = 1;
        int m=obstacleGrid.length;
        int n=obstacleGrid[0].length;
    
    //1st column    
    for (int i = 1; i < m; i++) {
        obstacleGrid[i][0] = (obstacleGrid[i][0] == 0 && obstacleGrid[i - 1][0] == 1) ? 1 : 0;
    }
    
    //1st row
    for (int i = 1; i < n; i++) {
      obstacleGrid[0][i] = (obstacleGrid[0][i] == 0 && obstacleGrid[0][i-1] == 1) ? 1 : 0;
    }
    
    for (int i = 1; i < m; i++) {
      for (int j = 1; j < n; j++) {
          if (obstacleGrid[i][j] == 0) {
                    obstacleGrid[i][j] = obstacleGrid[i - 1][j] + obstacleGrid[i][j - 1];
                } else {
                    obstacleGrid[i][j] = 0;
      }
    }}
    return obstacleGrid[m - 1][n - 1];  
    }
}
