class Solution {
    boolean[] visited;
    int[][] graph;
    Set<Integer> red=new HashSet<Integer>();
    Set<Integer> blue=new HashSet<Integer>();
    public boolean isBipartite(int[][] graph) {
        int len=graph.length;
        visited=new boolean[len];
        this.graph=graph;
        Arrays.fill(visited,false);
        for(int i=0;i<len;i++)
        {
            if(!visited[i])
                dfs(i,0);
        }
        for(int i = 0;i<graph.length;i++)
        {
            int from = i;
            for(int j = 0;j<graph[i].length;j++)
            {
                int to = graph[i][j];
                if((red.contains(from)&&red.contains(to)) || blue.contains(from)&&blue.contains(to))
                    return false;
            }
        }
        return true;
    }
    
    public void dfs(int v,int depth){
        if(visited[v]) return;
        visited[v]=true;
        if(depth%2==0) red.add(v);
        else blue.add(v);
        int[] adjList=graph[v];
        for(int i:adjList){
            dfs(i,depth+1);
        }
    }
}
