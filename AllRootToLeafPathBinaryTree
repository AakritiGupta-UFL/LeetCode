import java.util.List;
import java.util.ArrayList;

 // Definition for a binary tree node.
  class TreeNode {
      int val;
      TreeNode left;
     TreeNode right;
      TreeNode(int x) { val = x; }
  }

public class Solution {
    String path = "";
    List<String> list = new ArrayList<>();
    public void binaryTreePaths(TreeNode root) {
        if(root == null) {}
        helper(root);
        for(int i=0;i<list.size();i++)
        {
            System.out.println(list.get(i));
        }
        //return list;


    }

    private void helper(TreeNode root){
        //if the root is null, just return
        if(root == null) return;
        // otherwise, add its value to the String.
        path += Integer.toString(root.val);
        // if it is the leaf node, return the current path;
        if(root.left == null && root.right == null) {
            list.add(path);
            //then delete the value plus its corresponding arrow
            System.out.println(root.val+"value");
            System.out.println(String.valueOf(root.val)+"value1");
            int idx = path.lastIndexOf(String.valueOf(root.val));
            if(idx != -1) path = path.substring(0,idx);
            return;
        }
        //if it is not the leaf node ,add arrow symbol
        path += "->";
        // and do the depth-first search
        helper(root.left);
        helper(root.right);
        //after the visted all the pathes from the current node\
        //delete the node value from the path
        int idx = path.lastIndexOf(String.valueOf(root.val));
        if(idx != -1) path = path.substring(0,idx);

    }

    public static void main(String[] args)
    {
        TreeNode tree = new TreeNode(10);
        tree = new TreeNode(10);
        tree.left = new TreeNode(8);
        tree.right = new TreeNode(2);
        tree.left.left = new TreeNode(3);
        tree.left.right = new TreeNode(5);
        tree.right.left = new TreeNode(2);
        tree.left.left.left=new TreeNode(4);
        tree.left.left.right=new TreeNode(9);

        Solution sol=new Solution();
        sol.binaryTreePaths(tree);
    }
}
