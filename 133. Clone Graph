/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> neighbors;
    
    public Node() {
        val = 0;
        neighbors = new ArrayList<Node>();
    }
    
    public Node(int _val) {
        val = _val;
        neighbors = new ArrayList<Node>();
    }
    
    public Node(int _val, ArrayList<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
}
*/
class Solution {
    public Node cloneGraph(Node node) {
        if(node==null) return node;
        HashMap<Node,Node> map=new HashMap<>();
        return helper(node,map);
    }
    
    public Node helper(Node node,HashMap<Node,Node> cloned)
    {
        if (cloned.containsKey(node)) {
            return cloned.get(node);
        }
        ArrayList<Node> neighbors = new ArrayList<>();
        Node newNode = new Node(node.val, neighbors);
        cloned.put(node, newNode);
        for (Node nei : node.neighbors) {
            neighbors.add(helper(nei, cloned));
        }
        return newNode;
    }
}
