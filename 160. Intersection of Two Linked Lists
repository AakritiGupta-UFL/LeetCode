/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        
        ListNode l1=headA;
        ListNode l2;
        while(l1!=null){
            for(l2=headB;l2!=null;l2=l2.next){
                if(l1==l2)
                    return l1;
            }
            l1=l1.next;
        }
       
        return null;
    }
}

                                                    * APPROACH 2
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        ListNode A=headA;
        ListNode B=headB;
        Set<ListNode> map=new HashSet<>();
        while(A!=null){
            map.add(A);
            A=A.next;
        }
        if(map.isEmpty()) 
            return null;
        while(B!=null){
            if(map.contains(B))
            { return B;}
            B=B.next;
        }
        return null;
    }
}
